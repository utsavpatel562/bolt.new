const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});
const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});
export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'create a todo app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "React Todo App with Tailwind CSS",\n  "explanation": "A feature-rich Todo application built with React and Vite, styled using Tailwind CSS. It allows users to add, view, search, edit, complete, and delete tasks. Tasks include creation timestamps (formatted using date-fns) and are persisted using browser local storage. The app also supports filtering tasks by status (all, active, completed) and clearing all completed tasks. Lucide-react icons are used for a clean and intuitive user interface.",\n  "files": {\n    "/package.json": {\n      "code": "{\\n  \\"name\\": \\"react-todo-app-tailwind-vite\\",\\n  \\"private\\": true,\\n  \\"version\\": \\"0.0.0\\",\\n  \\"type\\": \\"module\\",\\n  \\"scripts\\": {\\n    \\"dev\\": \\"vite\\",\\n    \\"build\\": \\"vite build\\",\\n    \\"lint\\": \\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\\",\\n    \\"preview\\": \\"vite preview\\"\\n  },\\n  \\"dependencies\\": {\\n    \\"react\\": \\"^18.2.0\\",\\n    \\"react-dom\\": \\"^18.2.0\\",\\n    \\"lucide-react\\": \\"^0.378.0\\",\\n    \\"date-fns\\": \\"^3.6.0\\"\\n  },\\n  \\"devDependencies\\": {\\n    \\"@types/react\\": \\"^18.2.43\\",\\n    \\"@types/react-dom\\": \\"^18.2.17\\",\\n    \\"@vitejs/plugin-react\\": \\"^4.2.1\\",\\n    \\"eslint\\": \\"^8.55.0\\",\\n    \\"eslint-plugin-react\\": \\"^7.33.2\\",\\n    \\"eslint-plugin-react-hooks\\": \\"^4.6.0\\",\\n    \\"eslint-plugin-react-refresh\\": \\"^0.4.5\\",\\n    \\"vite\\": \\"^5.0.8\\",\\n    \\"tailwindcss\\": \\"^3.4.1\\",\\n    \\"postcss\\": \\"^8.4.33\\",\\n    \\"autoprefixer\\": \\"^10.4.17\\"\\n  }\\n}"\n    },\n    "/vite.config.js": {\n      "code": "import { defineConfig } from \'vite\';\\nimport react from \'@vitejs/plugin-react\';\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n});\\n"\n    },\n    "/tailwind.config.js": {\n      "code": "/** @type {import(\'tailwindcss\').Config} */\\nexport default {\\n  content: [\\n    \\"./index.html\\",\\n    \\"./src/**/*.{js,ts,jsx,tsx}\\",\\n  ],\\n  theme: {\\n    extend: {\\n      colors: {\\n        primary: \'#3b82f6\', // Blue-500\\n        secondary: \'#10b981\', // Emerald-500\\n        accent: \'#f59e0b\', // Amber-500\\n        neutral: \'#6b7280\', // Gray-500\\n        \'base-100\': \'#ffffff\', // White\\n        \'base-200\': \'#f3f4f6\', // Gray-100 (light mode background)\\n        \'base-300\': \'#e5e7eb\', // Gray-200 (light mode card)\\n        // Dark mode specific, as used in App.js and components\\n        \'slate-900\': \'rgb(15 23 42)\',\\n        \'slate-800\': \'rgb(30 41 59)\',\\n        \'slate-700\': \'rgb(51 65 85)\',\\n        \'slate-600\': \'rgb(71 85 105)\',\\n        \'slate-500\': \'rgb(100 116 139)\',\\n        \'emerald-400\': \'rgb(52 211 153)\',\\n        \'emerald-500\': \'rgb(16 185 129)\',\\n        \'cyan-400\': \'rgb(34 211 238)\',\\n      },\\n      fontFamily: {\\n        sans: [\'Inter\', \'sans-serif\'],\\n      },\\n    },\\n  },\\n  plugins: [],\\n}\\n"\n    },\n    "/postcss.config.js": {\n      "code": "export default {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n"\n    },\n    "/index.html": {\n      "code": "<!doctype html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <link rel=\\"icon\\" type=\\"image/svg+xml\\" href=\\"/src/assets/logo.svg\\" /> \\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <title>TodoMaster - React & Tailwind</title>\\n    <link rel=\\"preconnect\\" href=\\"https://fonts.googleapis.com\\">\\n    <link rel=\\"preconnect\\" href=\\"https://fonts.gstatic.com\\" crossorigin>\\n    <link href=\\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap\\" rel=\\"stylesheet\\">\\n  </head>\\n  <body class=\\"bg-slate-900\\">\\n    <div id=\\"root\\"></div>\\n    <script type=\\"module\\" src=\\"/src/main.jsx\\"></script>\\n  </body>\\n</html>\\n"\n    },\n    "/.gitignore": {\n      "code": "# Logs\\nlogs\\n*.log\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\npnpm-debug.log*\\nlerna-debug.log*\\n\\nnode_modules\\ndist\\ndist-ssr\\n*.local\\n\\n# Editor directories and files\\n.vscode/*\\n!.vscode/extensions.json\\n.idea\\n.DS_Store\\n*.suo\\n*.ntvs*\\n*.njsproj\\n*.sln\\n*.sw?\\n\\n# Environment variables\\n.env\\n.env.development.local\\n.env.test.local\\n.env.production.local\\n.env.local\\n\\n# Vite specific\\ncoverage\\n.vite\\n"\n    },\n    "/src/main.jsx": {\n      "code": "import React from \'react\';\\nimport ReactDOM from \'react-dom/client\';\\nimport App from \'./App.js\';\\nimport \'./index.css\';\\n\\nReactDOM.createRoot(document.getElementById(\'root\')).render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n);\\n"\n    },\n    "/src/index.css": {\n      "code": "@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\nbody {\\n  font-family: \'Inter\', sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n"\n    },\n    "/src/App.js": {\n      "code": "import React, { useState, useEffect, useCallback } from \'react\';\\nimport Header from \'./components/Header/Header.js\';\\nimport TodoForm from \'./components/TodoForm/TodoForm.js\';\\nimport TodoList from \'./components/TodoList/TodoList.js\';\\nimport Footer from \'./components/Footer/Footer.js\';\\nimport { loadState, saveState } from \'./utils/localStorage.js\';\\n\\nconst LOCAL_STORAGE_KEY = \'react-todo-app-todos-v2\';\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(() => loadState(LOCAL_STORAGE_KEY) || []);\\n  const [filter, setFilter] = useState(\'all\'); // \'all\', \'active\', \'completed\'\\n  const [searchTerm, setSearchTerm] = useState(\'\');\\n\\n  useEffect(() => {\\n    saveState(LOCAL_STORAGE_KEY, todos);\\n  }, [todos]);\\n\\n  const generateId = () => {\\n    return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\\n  };\\n\\n  const addTodo = useCallback((text) => {\\n    if (text.trim() === \'\') return;\\n    const newTodo = {\\n      id: generateId(),\\n      text: text.trim(),\\n      completed: false,\\n      createdAt: new Date().toISOString(),\\n    };\\n    setTodos(prevTodos => [newTodo, ...prevTodos]);\\n  }, []);\\n\\n  const toggleTodo = useCallback((id) => {\\n    setTodos(prevTodos =>\\n      prevTodos.map(todo =>\\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n      )\\n    );\\n  }, []);\\n\\n  const deleteTodo = useCallback((id) => {\\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\\n  }, []);\\n\\n  const editTodo = useCallback((id, newText) => {\\n    if (newText.trim() === \'\') return;\\n    setTodos(prevTodos =>\\n      prevTodos.map(todo =>\\n        todo.id === id ? { ...todo, text: newText.trim() } : todo\\n      )\\n    );\\n  }, []);\\n\\n  const clearCompleted = useCallback(() => {\\n    setTodos(prevTodos => prevTodos.filter(todo => !todo.completed));\\n  }, []);\\n\\n  const filteredTodos = todos.filter(todo => {\\n    const matchesFilter =\\n      filter === \'all\' ||\\n      (filter === \'active\' && !todo.completed) ||\\n      (filter === \'completed\' && todo.completed);\\n\\n    const matchesSearch = todo.text.toLowerCase().includes(searchTerm.toLowerCase());\\n\\n    return matchesFilter && matchesSearch;\\n  });\\n\\n  const activeTodoCount = todos.filter(todo => !todo.completed).length;\\n\\n  return (\\n    <div className=\\"min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-gray-100 flex flex-col items-center pt-8 pb-16 px-4 font-sans antialiased\\">\\n      <div className=\\"w-full max-w-2xl bg-slate-800/70 backdrop-blur-md shadow-2xl rounded-xl p-6 md:p-8 ring-1 ring-slate-700\\">\\n        <Header onSearchChange={setSearchTerm} currentSearchTerm={searchTerm} />\\n        <TodoForm onAddTodo={addTodo} />\\n        {todos.length > 0 ? (\\n          <TodoList\\n            todos={filteredTodos}\\n            onToggleTodo={toggleTodo}\\n            onDeleteTodo={deleteTodo}\\n            onEditTodo={editTodo}\\n          />\\n        ) : (\\n          <p className=\\"text-center text-gray-400 py-10 text-lg\\">✨ Your task list is empty! Add a new task to get started. ✨</p>\\n        )}\\n        {todos.length > 0 && (\\n          <Footer\\n            activeCount={activeTodoCount}\\n            currentFilter={filter}\\n            onSetFilter={setFilter}\\n            onClearCompleted={clearCompleted}\\n            totalTodos={todos.length}\\n          />\\n        )}\\n      </div>\\n      <footer className=\\"text-center mt-12 text-gray-500 text-sm\\">\\n        <p>Crafted with <span role=\\"img\\" aria-label=\\"heart\\">❤️</span> using React, Tailwind CSS, and Lucide Icons.</p>\\n        <p>All data is stored locally in your browser.</p>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n"\n    },\n    "/src/components/Header/Header.js": {\n      "code": "import React from \'react\';\\nimport { Check, Search, X } from \'lucide-react\'; // Using Check as a placeholder logo icon\\n\\nconst Header = ({ onSearchChange, currentSearchTerm }) => {\\n  const handleClearSearch = () => {\\n    onSearchChange(\'\');\\n    // If the input is controlled directly by App\'s state, this will clear it.\\n    // If you have a local ref to the input, you\'d set its value to \'\' here.\\n    const searchInput = document.getElementById(\'task-search-input\');\\n    if (searchInput) searchInput.value = \'\';\\n  };\\n\\n  return (\\n    <header className=\\"mb-6 md:mb-8\\">\\n      <div className=\\"flex items-center justify-center sm:justify-start mb-6\\">\\n        <div className=\\"flex items-center space-x-3\\">\\n          <div className=\\"p-2 bg-gradient-to-br from-emerald-500 to-cyan-500 rounded-lg shadow-lg\\">\\n            <Check className=\\"w-8 h-8 text-white\\" strokeWidth={3} />\\n          </div>\\n          <h1 className=\\"text-3xl md:text-4xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-emerald-400 to-cyan-400\\">\\n            TodoMaster\\n          </h1>\\n        </div>\\n      </div>\\n      <div className=\\"relative\\">\\n        <input\\n          id=\\"task-search-input\\"\\n          type=\\"text\\"\\n          defaultValue={currentSearchTerm} // Use defaultValue if not fully controlling input here\\n          onChange={(e) => onSearchChange(e.target.value)}\\n          placeholder=\\"🔎 Search tasks...\\"\\n          className=\\"w-full p-3.5 pl-12 pr-10 bg-slate-700 border border-slate-600 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 placeholder-gray-400 text-gray-100 shadow-sm\\"\\n          aria-label=\\"Search tasks\\"\\n        />\\n        <Search className=\\"w-5 h-5 text-gray-400 absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-none\\" />\\n        {currentSearchTerm && (\\n          <button \\n            onClick={handleClearSearch}\\n            className=\\"absolute right-3 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-200 transition-colors\\"\\n            aria-label=\\"Clear search\\"\\n          >\\n            <X size={20} />\\n          </button>\\n        )}\\n      </div>\\n    </header>\\n  );\\n};\\n\\nexport default Header;\\n"\n    },\n    "/src/components/TodoForm/TodoForm.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Plus } from \'lucide-react\';\\n\\nconst TodoForm = ({ onAddTodo }) => {\\n  const [inputText, setInputText] = useState(\'\');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (inputText.trim()) {\\n      onAddTodo(inputText);\\n      setInputText(\'\');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"flex items-center mb-6 md:mb-8 gap-3\\">\\n      <input\\n        type=\\"text\\"\\n        value={inputText}\\n        onChange={(e) => setInputText(e.target.value)}\\n        placeholder=\\"✍️ Add a new brilliant task...\\"\\n        className=\\"flex-grow p-3.5 bg-slate-700 border border-slate-600 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 placeholder-gray-400 text-gray-100 shadow-sm\\"\\n        aria-label=\\"New todo input\\"\\n      />\\n      <button\\n        type=\\"submit\\"\\n        disabled={!inputText.trim()}\\n        className=\\"bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 disabled:opacity-50 disabled:cursor-not-allowed text-white font-semibold p-3.5 rounded-lg transition-all duration-300 flex items-center justify-center shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:ring-opacity-75\\"\\n        aria-label=\\"Add todo\\"\\n      >\\n        <Plus size={22} strokeWidth={2.5} />\\n        <span className=\\"ml-2 hidden sm:inline\\">Add Task</span>\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default TodoForm;\\n"\n    },\n    "/src/components/TodoList/TodoList.js": {\n      "code": "import React from \'react\';\\nimport TodoItem from \'../TodoItem/TodoItem.js\';\\n\\nconst TodoList = ({ todos, onToggleTodo, onDeleteTodo, onEditTodo }) => {\\n  if (todos.length === 0) {\\n    return <p className=\\"text-center text-gray-400 py-10 text-lg\\">🎉 All caught up! No tasks match your current filter. 🎉</p>;\\n  }\\n\\n  return (\\n    <ul className=\\"space-y-3 transition-all duration-500\\">\\n      {todos.map((todo, index) => (\\n        <TodoItem\\n          key={todo.id} // Ensure key is stable and unique\\n          todo={todo}\\n          onToggleTodo={onToggleTodo}\\n          onDeleteTodo={onDeleteTodo}\\n          onEditTodo={onEditTodo}\\n          style={{ animationDelay: `${index * 50}ms` }} // Stagger animation\\n        />\\n      ))}\\n    </ul>\\n  );\\n};\\n\\nexport default TodoList;\\n"\n    },\n    "/src/components/TodoItem/TodoItem.js": {\n      "code": "import React, { useState, useRef, useEffect } from \'react\';\\nimport { Check, Trash, Edit, X } from \'lucide-react\';\\nimport { formatDistanceToNow, parseISO } from \'date-fns\';\\n\\nconst TodoItem = ({ todo, onToggleTodo, onDeleteTodo, onEditTodo, style }) => {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n  const editInputRef = useRef(null);\\n\\n  const handleEdit = () => {\\n    setIsEditing(true);\\n    setEditText(todo.text); // Reset to original text when starting edit\\n  };\\n\\n  const handleSave = () => {\\n    if (editText.trim() !== todo.text && editText.trim() !== \'\') {\\n      onEditTodo(todo.id, editText.trim());\\n    }\\n    setIsEditing(false);\\n  };\\n\\n  const handleCancelEdit = () => {\\n    setIsEditing(false);\\n    setEditText(todo.text); // Revert to original text\\n  };\\n\\n  const handleKeyDown = (e) => {\\n    if (e.key === \'Enter\') {\\n      handleSave();\\n    }\\n    if (e.key === \'Escape\') {\\n      handleCancelEdit();\\n    }\\n  };\\n\\n  useEffect(() => {\\n    if (isEditing && editInputRef.current) {\\n      editInputRef.current.focus();\\n      editInputRef.current.select();\\n    }\\n  }, [isEditing]);\\n\\n  const timeAgo = formatDistanceToNow(parseISO(todo.createdAt), { addSuffix: true });\\n\\n  return (\\n    <li \\n      style={style}\\n      className={`flex items-center justify-between p-4 rounded-lg shadow-lg transition-all duration-300 ease-in-out group animate-fadeInUp\\n                 ${todo.completed ? \'bg-slate-700/60 opacity-70\' : \'bg-slate-700 hover:bg-slate-600/80\'}`}>\\n      <div className=\\"flex items-center flex-grow min-w-0 mr-2 space-x-3\\">\\n        <button\\n          onClick={() => onToggleTodo(todo.id)}\\n          className={`flex-shrink-0 p-1.5 rounded-full border-2 transition-all duration-200 ease-in-out transform group-hover:scale-110\\n                      ${todo.completed ? \'border-emerald-500 bg-emerald-500 hover:bg-emerald-600\' : \'border-gray-500 hover:border-emerald-400\'}\\n                      focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:ring-opacity-60`}\\n          aria-label={todo.completed ? \\"Mark as incomplete\\" : \\"Mark as complete\\"}\\n        >\\n          {todo.completed ? <Check size={18} className=\\"text-slate-800\\" strokeWidth={3}/> : <div className=\\"w-[18px] h-[18px]\\"></div>}\\n        </button>\\n        {isEditing ? (\\n          <input\\n            ref={editInputRef}\\n            type=\\"text\\"\\n            value={editText}\\n            onChange={(e) => setEditText(e.target.value)}\\n            onKeyDown={handleKeyDown}\\n            onBlur={() => setTimeout(handleSave, 100)} // Delay blur to allow icon clicks\\n            className=\\"flex-grow bg-slate-600 text-gray-100 p-2 rounded outline-none ring-2 ring-emerald-500 shadow-inner text-base w-full\\"\\n            aria-label=\\"Edit todo text\\"\\n          />\\n        ) : (\\n          <div \\n            className={`flex-grow min-w-0 cursor-pointer ${todo.completed ? \'\' : \'group-hover:text-emerald-300\'}`}\\n            onClick={() => !todo.completed && !isEditing && handleEdit()}\\n          >\\n            <span \\n              className={`block text-base break-words ${todo.completed ? \'line-through text-gray-400\' : \'text-gray-50\'} transition-colors`}\\n              title={todo.text}\\n            >\\n              {todo.text}\\n            </span>\\n            <span className=\\"text-xs text-gray-400 block mt-1\\">\\n              Added {timeAgo}\\n            </span>\\n          </div>\\n        )}\\n      </div>\\n      <div className=\\"flex items-center space-x-1.5 flex-shrink-0 ml-2\\">\\n        {isEditing ? (\\n          <>\\n            <button\\n              onClick={handleSave}\\n              className=\\"p-2 text-emerald-400 hover:text-emerald-300 transition-colors focus:outline-none focus:ring-1 focus:ring-emerald-400 rounded-md hover:bg-slate-600\\"\\n              aria-label=\\"Save changes\\"\\n            >\\n              <Check size={20} />\\n            </button>\\n            <button\\n              onClick={handleCancelEdit}\\n              className=\\"p-2 text-amber-400 hover:text-amber-300 transition-colors focus:outline-none focus:ring-1 focus:ring-amber-400 rounded-md hover:bg-slate-600\\"\\n              aria-label=\\"Cancel editing\\"\\n            >\\n              <X size={20} />\\n            </button>\\n          </>\\n        ) : (\\n          <>\\n            {!todo.completed && (\\n              <button\\n                onClick={handleEdit}\\n                className=\\"p-2 text-sky-400 hover:text-sky-300 transition-colors opacity-0 group-hover:opacity-100 focus:opacity-100 focus:outline-none focus:ring-1 focus:ring-sky-400 rounded-md hover:bg-slate-600\\"\\n                aria-label=\\"Edit todo\\"\\n              >\\n                <Edit size={18} />\\n              </button>\\n            )}\\n            <button\\n              onClick={() => onDeleteTodo(todo.id)}\\n              className=\\"p-2 text-rose-500 hover:text-rose-400 transition-colors opacity-0 group-hover:opacity-100 focus:opacity-100 focus:outline-none focus:ring-1 focus:ring-rose-400 rounded-md hover:bg-slate-600\\"\\n              aria-label=\\"Delete todo\\"\\n            >\\n              <Trash size={18} />\\n            </button>\\n          </>\\n        )}\\n      </div>\\n    </li>\\n  );\\n};\\n\\nexport default TodoItem;\\n"\n    },\n    "/src/components/Footer/Footer.js": {\n      "code": "import React from \'react\';\\n\\nconst FilterButton = ({ filter, currentFilter, onClick, children, count }) => (\\n  <button\\n    onClick={() => onClick(filter)}\\n    className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all duration-200 ease-in-out relative\\n                ${currentFilter === filter \\n                  ? \'bg-emerald-500 text-white shadow-md\'\\n                  : \'bg-slate-600 hover:bg-slate-500 text-gray-300 hover:text-gray-100\'\\n                }\\n                focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:ring-opacity-75`}\\n  >\\n    {children}\\n    {typeof count !== \'undefined\' && (\\n        <span className={`ml-1.5 px-1.5 py-0.5 text-xs rounded-full ${currentFilter === filter ? \'bg-emerald-700 text-emerald-100\' : \'bg-slate-500 text-slate-200\'}`}>\\n            {count}\\n        </span>\\n    )}\\n  </button>\\n);\\n\\nconst Footer = ({ activeCount, currentFilter, onSetFilter, onClearCompleted, totalTodos }) => {\\n  const completedCount = totalTodos - activeCount;\\n  return (\\n    <footer className=\\"mt-6 md:mt-8 pt-6 border-t border-slate-700 flex flex-col sm:flex-row items-center justify-between text-sm text-gray-400 space-y-4 sm:space-y-0\\">\\n      <span className=\\"font-medium\\">\\n        {activeCount} {activeCount === 1 ? \'task\' : \'tasks\'} active\\n      </span>\\n      <div className=\\"flex space-x-2\\">\\n        <FilterButton filter=\\"all\\" currentFilter={currentFilter} onClick={onSetFilter} count={totalTodos}>\\n          All\\n        </FilterButton>\\n        <FilterButton filter=\\"active\\" currentFilter={currentFilter} onClick={onSetFilter} count={activeCount}>\\n          Active\\n        </FilterButton>\\n        <FilterButton filter=\\"completed\\" currentFilter={currentFilter} onClick={onSetFilter} count={completedCount}>\\n          Completed\\n        </FilterButton>\\n      </div>\\n      {completedCount > 0 && (\\n        <button\\n          onClick={onClearCompleted}\\n          className=\\"text-rose-400 hover:text-rose-300 hover:underline transition-colors focus:outline-none focus:ring-1 focus:ring-rose-400 rounded-md px-2 py-1 text-sm font-medium\\"\\n        >\\n          Clear Completed ({completedCount})\\n        </button>\\n      )}\\n      {completedCount === 0 && (\\n        <div className=\\"w-[150px] text-center\\"> {/* Placeholder to maintain layout consistency */} </div>\\n      )}\\n    </footer>\\n  );\\n};\\n\\nexport default Footer;\\n"\n    },\n    "/src/utils/localStorage.js": {\n      "code": "export const loadState = (key) => {\\n  try {\\n    const serializedState = localStorage.getItem(key);\\n    if (serializedState === null) {\\n      return undefined;\\n    }\\n    const state = JSON.parse(serializedState);\\n    // Basic migration: ensure all todos have createdAt\\n    if (Array.isArray(state)) {\\n        return state.map(todo => ({...todo, createdAt: todo.createdAt || new Date().toISOString()}));\\n    }\\n    return state;\\n  } catch (err) {\\n    console.error(\\"Could not load state from localStorage for key \'\\" + key + \\"\':\\", err);\\n    return undefined;\\n  }\\n};\\n\\nexport const saveState = (key, state) => {\\n  try {\\n    const serializedState = JSON.stringify(state);\\n    localStorage.setItem(key, serializedState);\\n  } catch (err) {\\n    console.error(\\"Could not save state to localStorage for key \'\\" + key + \\"\':\\", err);\\n  }\\n};\\n"\n    },\n    "/src/assets/logo.svg": {\n        "code": "<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"lucide lucide-check-square\\"><polyline points=\\"9 11 12 14 22 4\\"/><path d=\\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\\"/></svg>"\n    }\n  },\n  "generatedFiles": [\n    "/package.json",\n    "/vite.config.js",\n    "/tailwind.config.js",\n    "/postcss.config.js",\n    "/index.html",\n    "/.gitignore",\n    "/src/main.jsx",\n    "/src/index.css",\n    "/src/App.js",\n    "/src/components/Header/Header.js",\n    "/src/components/TodoForm/TodoForm.js",\n    "/src/components/TodoList/TodoList.js",\n    "/src/components/TodoItem/TodoItem.js",\n    "/src/components/Footer/Footer.js",\n    "/src/utils/localStorage.js",\n    "/src/assets/logo.svg"\n  ]\n}\n```',
        },
      ],
    },
  ],
});
// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
